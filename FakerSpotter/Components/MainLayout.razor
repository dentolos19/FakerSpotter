@inherits LayoutComponentBase

<Layout>
    <LayoutHeader>
        <nav class="bg-light navbar navbar-light">
            <div class="container">
                <a class="navbar-brand" href="">
                    <img src="assets/images/icon.png" width="32"/>
                    <span class="align-middle">FakerSpotter</span>
                </a>
                <a class="d-flex" href="leaderboards">Leaderboards</a>
            </div>
        </nav>
    </LayoutHeader>
    <LayoutContent>
        <Steps Margin="Margin.Is2">
            <Items>
                <Step Name="start" Color="Color.Primary" Completed="true">
                    <Marker>
                        <Icon Name="IconName.Home"/>
                    </Marker>
                    <Caption>
                        Start
                    </Caption>
                </Step>
                <Step Name="room1" Index="1" Color="Color.Success" Completed="UserSettings.IsRoomOneCompleted">Room 1</Step>
                <Step Name="room2" Index="2" Color="Color.Warning" Completed="UserSettings.IsRoomTwoCompleted">Room 2</Step>
                <Step Name="room3" Index="3" Color="Color.Danger" Completed="UserSettings.IsRoomThreeCompleted">Room 3</Step>
                <Step Name="finish" Color="Color.Primary" Completed="UserSettings.IsRoomOneCompleted && UserSettings.IsRoomTwoCompleted && UserSettings.IsRoomThreeCompleted">
                    <Marker>
                        <Icon Name="IconName.Flag"/>
                    </Marker>
                    <Caption>
                        Finish
                    </Caption>
                </Step>
            </Items>
            <Content>
                <Row>
                    <Column/>
                    <Column ColumnSize="ColumnSize.Is10" Padding="Padding.Is2">
                        @Body
                    </Column>
                    <Column/>
                </Row>
            </Content>
        </Steps>
    </LayoutContent>
</Layout>

@code
{

    [Inject] private HttpClient HttpClient { get; set; }
    [Inject] private ISyncLocalStorageService LocalStorage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        UserSettings.LocalStorage ??= LocalStorage;
        GlobalVariables.Tips ??= JsonSerializer.Deserialize<string[]>(await HttpClient.GetStringAsync("data/tips.json"));
        GlobalVariables.StatementQuestions ??= JsonSerializer.Deserialize<StatementQuestion[]>(await HttpClient.GetStringAsync("data/statements.json"));
        GlobalVariables.HeadlineQuestions ??= JsonSerializer.Deserialize<HeadlineQuestions>(await HttpClient.GetStringAsync("data/headlines.json"));
        GlobalVariables.NewsQuestions ??= JsonSerializer.Deserialize<NewsQuestion[]>(await HttpClient.GetStringAsync("data/news.json"));
    }

}