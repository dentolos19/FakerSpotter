@page "/room2"

<RoomPanel RoomName="@string.Format("Room 2: Spot the fake headline! ({0}/5)", QuestionsAnswered)" IsCompleted="UserSettings.IsRoomTwoCompleted" IsLocked="!UserSettings.IsRoomOneCompleted" NextRoomEndpoint="room3" PreviousRoomEndpoint="room1">
    <RoomContent>
        @QuestionPanel
    </RoomContent>
</RoomPanel>

@code
{

    [Inject] private NavigationManager NavigationManager { get; set; }
    [Inject] private HttpClient HttpClient { get; set; }
    [Inject] private Random Random { get; set; }

    private int PointsScored { get; set; } = 200;
    private int QuestionsAnswered { get; set; }
    private HeadlineQuestions Questions { get; set; }
    private RenderFragment QuestionPanel { get; set; }

    protected override void OnInitialized()
    {
        Questions = GlobalVariables.HeadlineQuestions;
        NextQuestion();
    }

    private void OnQuestionCompleted(bool answeredCorrectly)
    {
        if (answeredCorrectly)
        {
            QuestionsAnswered++;
        }
        else
        {
            QuestionsAnswered = 0;
            PointsScored -= Random.Next(0, 30);
            if (PointsScored < 100)
                NextRoom();
        }
        if (QuestionsAnswered < 5)
        {
            NextQuestion();
        }
        else
        {
            NextRoom();
        }
    }

    private RenderFragment BuildClosedQuestion(HeadlineClosedQuestion question) => builder =>
    {
        builder.OpenComponent(0, typeof(HeadlineClosedPanel));
        builder.AddAttribute(1, "Question", question);
        builder.AddAttribute(2, "OnComplete", EventCallback.Factory.Create<bool>(this, OnQuestionCompleted));
        builder.CloseComponent();
    };

    private RenderFragment BuildMultipleChoiceQuestion(IDictionary<string, bool> question) => builder =>
    {
        builder.OpenComponent(0, typeof(HeadlineMultipleChoicePanel));
        builder.AddAttribute(1, "Question", question);
        builder.AddAttribute(2, "OnComplete", EventCallback.Factory.Create<bool>(this, OnQuestionCompleted));
        builder.CloseComponent();
    };

    private void NextQuestion()
    {
        if (Random.Next(0, 2) == 0)
        {
            var closedQuestion = Questions.ClosedQuestions[Random.Next(Questions.ClosedQuestions.Length)];
            QuestionPanel = BuildClosedQuestion(closedQuestion);
        }
        else
        {
            var multipleChoiceQuestion = Questions.MultipleChoiceQuestions[Random.Next(Questions.MultipleChoiceQuestions.Length)];
            QuestionPanel = BuildMultipleChoiceQuestion(multipleChoiceQuestion);
        }
    }

    private void NextRoom()
    {
        UserSettings.PointsAccumulated += PointsScored;
        UserSettings.IsRoomTwoCompleted = true;
        NavigationManager.NavigateTo("room3");
    }

}